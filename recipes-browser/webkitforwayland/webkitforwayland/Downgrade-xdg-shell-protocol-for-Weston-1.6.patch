From 31d75e5006dd8ce20495a4c0472e7cbbb6f35b0f Mon Sep 17 00:00:00 2001
From: Carlos Alberto Lopez Perez <clopez@igalia.com>
Date: Thu, 15 Oct 2015 17:15:52 +0200
Subject: [PATCH] Downgrade xdg-shell protocol for Weston 1.6

---
 .../Source/ViewBackend/Wayland/WaylandDisplay.cpp  |   2 +-
 .../Wayland/xdg-shell-client-protocol.h            | 150 ++++++---------------
 .../ViewBackend/Wayland/xdg-shell-protocol.c       |  20 +--
 3 files changed, 55 insertions(+), 117 deletions(-)

diff --git a/Source/WPE/Source/ViewBackend/Wayland/WaylandDisplay.cpp b/Source/WPE/Source/ViewBackend/Wayland/WaylandDisplay.cpp
index df00591..4a624d4 100644
--- a/Source/WPE/Source/ViewBackend/Wayland/WaylandDisplay.cpp
+++ b/Source/WPE/Source/ViewBackend/Wayland/WaylandDisplay.cpp
@@ -151,7 +151,7 @@ WaylandDisplay::WaylandDisplay()
 
     if (m_interfaces.xdg) {
         xdg_shell_add_listener(m_interfaces.xdg, &g_xdgShellListener, nullptr);
-        xdg_shell_use_unstable_version(m_interfaces.xdg, 5);
+        xdg_shell_use_unstable_version(m_interfaces.xdg, 4);
     }
 }
 
diff --git a/Source/WPE/Source/ViewBackend/Wayland/xdg-shell-client-protocol.h b/Source/WPE/Source/ViewBackend/Wayland/xdg-shell-client-protocol.h
index 24b92b0..4e60c6a 100644
--- a/Source/WPE/Source/ViewBackend/Wayland/xdg-shell-client-protocol.h
+++ b/Source/WPE/Source/ViewBackend/Wayland/xdg-shell-client-protocol.h
@@ -62,33 +62,23 @@ extern const struct wl_interface xdg_popup_interface;
  * static_assert to ensure the protocol and implementation versions match.
  */
 enum xdg_shell_version {
-	XDG_SHELL_VERSION_CURRENT = 5,
+	XDG_SHELL_VERSION_CURRENT = 4,
 };
 #endif /* XDG_SHELL_VERSION_ENUM */
 
-#ifndef XDG_SHELL_ERROR_ENUM
-#define XDG_SHELL_ERROR_ENUM
-enum xdg_shell_error {
-	XDG_SHELL_ERROR_ROLE = 0,
-	XDG_SHELL_ERROR_DEFUNCT_SURFACES = 1,
-	XDG_SHELL_ERROR_NOT_THE_TOPMOST_POPUP = 2,
-	XDG_SHELL_ERROR_INVALID_POPUP_PARENT = 3,
-};
-#endif /* XDG_SHELL_ERROR_ENUM */
-
 /**
  * xdg_shell - create desktop-style surfaces
  * @ping: check if the client is alive
  *
- * xdg_shell allows clients to turn a wl_surface into a "real window"
- * which can be dragged, resized, stacked, and moved around by the user.
- * Everything about this interface is suited towards traditional desktop
- * environments.
+ * This interface is implemented by servers that provide desktop-style
+ * user interfaces.
+ *
+ * It allows clients to associate a xdg_surface with a basic surface.
  */
 struct xdg_shell_listener {
 	/**
 	 * ping - check if the client is alive
-	 * @serial: pass this to the pong request
+	 * @serial: pass this to the callback
 	 *
 	 * The ping event asks the client if it's still alive. Pass the
 	 * serial specified in the event back to the compositor by sending
@@ -98,9 +88,6 @@ struct xdg_shell_listener {
 	 * alive. It's unspecified what will happen if the client doesn't
 	 * respond to the ping request, or in what timeframe. Clients
 	 * should try to respond in a reasonable amount of time.
-	 *
-	 * A compositor is free to ping in any way it wants, but a client
-	 * must always respond to any xdg_shell object it created.
 	 */
 	void (*ping)(void *data,
 		     struct xdg_shell *xdg_shell,
@@ -115,11 +102,10 @@ xdg_shell_add_listener(struct xdg_shell *xdg_shell,
 				     (void (**)(void)) listener, data);
 }
 
-#define XDG_SHELL_DESTROY	0
-#define XDG_SHELL_USE_UNSTABLE_VERSION	1
-#define XDG_SHELL_GET_XDG_SURFACE	2
-#define XDG_SHELL_GET_XDG_POPUP	3
-#define XDG_SHELL_PONG	4
+#define XDG_SHELL_USE_UNSTABLE_VERSION	0
+#define XDG_SHELL_GET_XDG_SURFACE	1
+#define XDG_SHELL_GET_XDG_POPUP	2
+#define XDG_SHELL_PONG	3
 
 static inline void
 xdg_shell_set_user_data(struct xdg_shell *xdg_shell, void *user_data)
@@ -136,9 +122,6 @@ xdg_shell_get_user_data(struct xdg_shell *xdg_shell)
 static inline void
 xdg_shell_destroy(struct xdg_shell *xdg_shell)
 {
-	wl_proxy_marshal((struct wl_proxy *) xdg_shell,
-			 XDG_SHELL_DESTROY);
-
 	wl_proxy_destroy((struct wl_proxy *) xdg_shell);
 }
 
@@ -161,12 +144,12 @@ xdg_shell_get_xdg_surface(struct xdg_shell *xdg_shell, struct wl_surface *surfac
 }
 
 static inline struct xdg_popup *
-xdg_shell_get_xdg_popup(struct xdg_shell *xdg_shell, struct wl_surface *surface, struct wl_surface *parent, struct wl_seat *seat, uint32_t serial, int32_t x, int32_t y)
+xdg_shell_get_xdg_popup(struct xdg_shell *xdg_shell, struct wl_surface *surface, struct wl_surface *parent, struct wl_seat *seat, uint32_t serial, int32_t x, int32_t y, uint32_t flags)
 {
 	struct wl_proxy *id;
 
 	id = wl_proxy_marshal_constructor((struct wl_proxy *) xdg_shell,
-			 XDG_SHELL_GET_XDG_POPUP, &xdg_popup_interface, NULL, surface, parent, seat, serial, x, y);
+			 XDG_SHELL_GET_XDG_POPUP, &xdg_popup_interface, NULL, surface, parent, seat, serial, x, y, flags);
 
 	return (struct xdg_popup *) id;
 }
@@ -246,7 +229,7 @@ enum xdg_surface_state {
 #endif /* XDG_SURFACE_STATE_ENUM */
 
 /**
- * xdg_surface - A desktop window
+ * xdg_surface - desktop-style metadata interface
  * @configure: suggest a surface change
  * @close: surface wants to be closed
  *
@@ -257,18 +240,9 @@ enum xdg_surface_state {
  * properties like maximized, fullscreen, minimized, and to move and resize
  * them, and associate metadata like title and app id.
  *
- * The client must call wl_surface.commit on the corresponding wl_surface
- * for the xdg_surface state to take effect. Prior to committing the new
- * state, it can set up initial configuration, such as maximizing or
- * setting a window geometry.
- *
- * Even without attaching a buffer the compositor must respond to initial
- * committed configuration, for instance sending a configure event with
- * expected window geometry if the client maximized its surface during
- * initialization.
- *
- * For a surface to be mapped by the compositor the client must have
- * committed both an xdg_surface state and a buffer.
+ * On the server side the object is automatically destroyed when the
+ * related wl_surface is destroyed. On client side, xdg_surface.destroy()
+ * must be called before destroying the wl_surface object.
  */
 struct xdg_surface_listener {
 	/**
@@ -278,27 +252,16 @@ struct xdg_surface_listener {
 	 * @states: (none)
 	 * @serial: (none)
 	 *
-	 * The configure event asks the client to resize its surface or
-	 * to change its state.
+	 * The configure event asks the client to resize its surface.
 	 *
 	 * The width and height arguments specify a hint to the window
 	 * about how its surface should be resized in window geometry
-	 * coordinates. See set_window_geometry.
-	 *
-	 * If the width or height arguments are zero, it means the client
-	 * should decide its own window dimension. This may happen when the
-	 * compositor need to configure the state of the surface but
-	 * doesn't have any information about any previous or expected
-	 * dimension.
+	 * coordinates. The states listed in the event specify how the
+	 * width/height arguments should be interpreted.
 	 *
-	 * The states listed in the event specify how the width/height
-	 * arguments should be interpreted, and possibly how it should be
-	 * drawn.
-	 *
-	 * Clients should arrange their surface for the new size and
-	 * states, and then send a ack_configure request with the serial
-	 * sent in this configure event at some point before committing the
-	 * new surface.
+	 * A client should arrange a new surface, and then send a
+	 * ack_configure request with the serial sent in this configure
+	 * event before attaching a new surface.
 	 *
 	 * If the client receives multiple configure events before it can
 	 * respond to one, it is free to discard all but the last event it
@@ -371,7 +334,7 @@ xdg_surface_destroy(struct xdg_surface *xdg_surface)
 }
 
 static inline void
-xdg_surface_set_parent(struct xdg_surface *xdg_surface, struct xdg_surface *parent)
+xdg_surface_set_parent(struct xdg_surface *xdg_surface, struct wl_surface *parent)
 {
 	wl_proxy_marshal((struct wl_proxy *) xdg_surface,
 			 XDG_SURFACE_SET_PARENT, parent);
@@ -462,65 +425,40 @@ xdg_surface_set_minimized(struct xdg_surface *xdg_surface)
 }
 
 /**
- * xdg_popup - short-lived, popup surfaces for menus
+ * xdg_popup - desktop-style metadata interface
  * @popup_done: popup interaction is done
  *
- * A popup surface is a short-lived, temporary surface that can be used
- * to implement menus. It takes an explicit grab on the surface that will
- * be dismissed when the user dismisses the popup. This can be done by the
- * user clicking outside the surface, using the keyboard, or even locking
- * the screen through closing the lid or a timeout.
- *
- * When the popup is dismissed, a popup_done event will be sent out, and at
- * the same time the surface will be unmapped. The xdg_popup object is now
- * inert and cannot be reactivated, so clients should destroy it.
- * Explicitly destroying the xdg_popup object will also dismiss the popup
- * and unmap the surface.
- *
- * Clients will receive events for all their surfaces during this grab
- * (which is an "owner-events" grab in X11 parlance). This is done so that
- * users can navigate through submenus and other "nested" popup windows
- * without having to dismiss the topmost popup.
- *
- * Clients that want to dismiss the popup when another surface of their own
- * is clicked should dismiss the popup using the destroy request.
- *
- * The parent surface must have either an xdg_surface or xdg_popup role.
- *
- * Specifying an xdg_popup for the parent means that the popups are nested,
- * with this popup now being the topmost popup. Nested popups must be
- * destroyed in the reverse order they were created in, e.g. the only popup
- * you are allowed to destroy at all times is the topmost one.
- *
- * If there is an existing popup when creating a new popup, the parent must
- * be the current topmost popup.
- *
- * A parent surface must be mapped before the new popup is mapped.
+ * An interface that may be implemented by a wl_surface, for
+ * implementations that provide a desktop-style popups/menus. A popup
+ * surface is a transient surface with an added pointer grab.
  *
- * When compositors choose to dismiss a popup, they will likely dismiss
- * every nested popup as well. When a compositor dismisses popups, it will
- * follow the same dismissing order as required from the client.
+ * An existing implicit grab will be changed to owner-events mode, and the
+ * popup grab will continue after the implicit grab ends (i.e. releasing
+ * the mouse button does not cause the popup to be unmapped).
  *
- * The x and y arguments passed when creating the popup object specify
- * where the top left of the popup should be placed, relative to the local
- * surface coordinates of the parent surface. See xdg_shell.get_xdg_popup.
+ * The popup grab continues until the window is destroyed or a mouse button
+ * is pressed in any other clients window. A click in any of the clients
+ * surfaces is reported as normal, however, clicks in other clients
+ * surfaces will be discarded and trigger the callback.
  *
- * The client must call wl_surface.commit on the corresponding wl_surface
- * for the xdg_popup state to take effect.
+ * The x and y arguments specify the locations of the upper left corner of
+ * the surface relative to the upper left corner of the parent surface, in
+ * surface local coordinates.
  *
- * For a surface to be mapped by the compositor the client must have
- * committed both the xdg_popup state and a buffer.
+ * xdg_popup surfaces are always transient for another surface.
  */
 struct xdg_popup_listener {
 	/**
 	 * popup_done - popup interaction is done
+	 * @serial: serial of the implicit grab on the pointer
 	 *
-	 * The popup_done event is sent out when a popup is dismissed by
-	 * the compositor. The client should destroy the xdg_popup object
-	 * at this point.
+	 * The popup_done event is sent out when a popup grab is broken,
+	 * that is, when the users clicks a surface that doesn't belong to
+	 * the client owning the popup surface.
 	 */
 	void (*popup_done)(void *data,
-			   struct xdg_popup *xdg_popup);
+			   struct xdg_popup *xdg_popup,
+			   uint32_t serial);
 };
 
 static inline int
diff --git a/Source/WPE/Source/ViewBackend/Wayland/xdg-shell-protocol.c b/Source/WPE/Source/ViewBackend/Wayland/xdg-shell-protocol.c
index 82433ea..863f74e 100644
--- a/Source/WPE/Source/ViewBackend/Wayland/xdg-shell-protocol.c
+++ b/Source/WPE/Source/ViewBackend/Wayland/xdg-shell-protocol.c
@@ -50,7 +50,8 @@ static const struct wl_interface *types[] = {
 	NULL,
 	NULL,
 	NULL,
-	&xdg_surface_interface,
+	NULL,
+	&wl_surface_interface,
 	&wl_seat_interface,
 	NULL,
 	NULL,
@@ -64,10 +65,9 @@ static const struct wl_interface *types[] = {
 };
 
 static const struct wl_message xdg_shell_requests[] = {
-	{ "destroy", "", types + 0 },
 	{ "use_unstable_version", "i", types + 0 },
 	{ "get_xdg_surface", "no", types + 4 },
-	{ "get_xdg_popup", "nooouii", types + 6 },
+	{ "get_xdg_popup", "nooouiiu", types + 6 },
 	{ "pong", "u", types + 0 },
 };
 
@@ -77,23 +77,23 @@ static const struct wl_message xdg_shell_events[] = {
 
 WL_EXPORT const struct wl_interface xdg_shell_interface = {
 	"xdg_shell", 1,
-	5, xdg_shell_requests,
+	4, xdg_shell_requests,
 	1, xdg_shell_events,
 };
 
 static const struct wl_message xdg_surface_requests[] = {
 	{ "destroy", "", types + 0 },
-	{ "set_parent", "?o", types + 13 },
+	{ "set_parent", "?o", types + 14 },
 	{ "set_title", "s", types + 0 },
 	{ "set_app_id", "s", types + 0 },
-	{ "show_window_menu", "ouii", types + 14 },
-	{ "move", "ou", types + 18 },
-	{ "resize", "ouu", types + 20 },
+	{ "show_window_menu", "ouii", types + 15 },
+	{ "move", "ou", types + 19 },
+	{ "resize", "ouu", types + 21 },
 	{ "ack_configure", "u", types + 0 },
 	{ "set_window_geometry", "iiii", types + 0 },
 	{ "set_maximized", "", types + 0 },
 	{ "unset_maximized", "", types + 0 },
-	{ "set_fullscreen", "?o", types + 23 },
+	{ "set_fullscreen", "?o", types + 24 },
 	{ "unset_fullscreen", "", types + 0 },
 	{ "set_minimized", "", types + 0 },
 };
@@ -114,7 +114,7 @@ static const struct wl_message xdg_popup_requests[] = {
 };
 
 static const struct wl_message xdg_popup_events[] = {
-	{ "popup_done", "", types + 0 },
+	{ "popup_done", "u", types + 0 },
 };
 
 WL_EXPORT const struct wl_interface xdg_popup_interface = {
-- 
2.1.4

